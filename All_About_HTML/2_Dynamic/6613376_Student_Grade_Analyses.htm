<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Grade Analyses</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Comic+Neue:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Comic Neue', cursive;
            background-color: #f0f9ff; /* sky-50 */
            /* Added a subtle background pattern for more visual texture */
            background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23a5f3fc' fill-opacity='0.4' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E");
        }
    </style>
</head>
<body class="bg-sky-50 text-gray-800 flex flex-col items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-6xl bg-white rounded-2xl shadow-lg p-6 md:p-8 space-y-8">
        
        <header class="text-center">
            <h1 class="text-3xl font-bold text-sky-800">Student Grade Analyses</h1>
            <p class="text-gray-500 mt-2">Upload a CSV with student data (sex, name, surname, score) to get started!</p>
        </header>

        <!-- File Input -->
        <div class="flex flex-col items-center p-6 border-2 border-dashed border-sky-300 rounded-xl bg-sky-100">
            <label for="csvFile" class="cursor-pointer bg-sky-500 text-white font-semibold py-2 px-5 rounded-lg hover:bg-sky-600 transition-transform transform hover:scale-105 duration-300 shadow-md">
                Choose a CSV File
            </label>
            <input type="file" id="csvFile" class="hidden" accept=".csv">
            <span id="fileName" class="mt-3 text-sm text-gray-500">No file selected</span>
        </div>
        
        <!-- Main Content Area -->
        <div id="output" class="hidden space-y-8">
            
            <!-- Stats and Histogram -->
            <div class="grid md:grid-cols-2 gap-8 items-start">
                <!-- Statistics -->
                <div class="bg-sky-100 p-6 rounded-xl">
                    <h2 class="text-xl font-semibold text-sky-800 text-center mb-4 flex items-center justify-center gap-2">
                        <!-- Graphic Icon -->
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-sky-600"><path d="M12 20V10H6V20H5V2H19V20H18V4H12Z"/></svg>
                        Basic Statistics
                    </h2>
                    <div id="stats" class="space-y-2 text-gray-700"></div>
                </div>
                <!-- Histogram -->
                <div class="flex flex-col items-center">
                    <h2 class="text-xl font-semibold text-sky-800 mb-4 flex items-center justify-center gap-2">
                        <!-- Graphic Icon -->
                         <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-sky-600"><path d="M3 3v18h18"/><path d="m19 9-5 5-4-4-3 3"/></svg>
                        Grade Distribution
                    </h2>
                    <canvas id="gradeHistogram" width="400" height="250"></canvas>
                </div>
            </div>

            <!-- Data Table and Download -->
            <div>
                 <div class="flex justify-between items-center mb-4">
                     <h2 class="text-xl font-semibold text-sky-800 flex items-center gap-2">
                        <!-- Graphic Icon -->
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-sky-600"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>
                        Student Data (Sorted by Score)
                    </h2>
                     <button id="downloadBtn" class="bg-emerald-500 text-white font-semibold py-2 px-5 rounded-lg hover:bg-emerald-600 transition-transform transform hover:scale-105 duration-300 shadow-md">
                        Download Sorted CSV
                    </button>
                 </div>
                <div id="csvTable" class="max-h-96 overflow-y-auto border border-gray-200 rounded-lg shadow-sm"></div>
            </div>

        </div>
         <!-- Error Message -->
        <div id="error-message" class="hidden text-center bg-pink-100 text-pink-700 p-3 rounded-md"></div>
    </div>

    <script>
        // DOM Elements
        const csvFileInput = document.getElementById('csvFile');
        const fileNameDisplay = document.getElementById('fileName');
        const outputContainer = document.getElementById('output');
        const tableContainer = document.getElementById('csvTable');
        const statsContainer = document.getElementById('stats');
        const downloadBtn = document.getElementById('downloadBtn');
        const errorMessageDiv = document.getElementById('error-message');
        const histogramCanvas = document.getElementById('gradeHistogram');
        const ctx = histogramCanvas.getContext('2d');

        // State
        let studentData = [];

        // Event Listeners
        csvFileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (!file) return;

            fileNameDisplay.textContent = file.name;
            const reader = new FileReader();

            reader.onload = function(e) {
                const text = e.target.result;
                resetState();
                try {
                    parseAndProcessCSV(text);
                    if (studentData.length > 0) {
                        displayAllData();
                        outputContainer.classList.remove('hidden');
                    }
                } catch (error) {
                    showError(error.message);
                }
            };
            
            reader.onerror = () => showError("Error reading the file.");
            reader.readAsText(file);
        });

        downloadBtn.addEventListener('click', downloadSortedCSV);
        
        function resetState() {
            studentData = [];
            outputContainer.classList.add('hidden');
            errorMessageDiv.classList.add('hidden');
            tableContainer.innerHTML = '';
            statsContainer.innerHTML = '';
        }
        
        function showError(message) {
            errorMessageDiv.textContent = message;
            errorMessageDiv.classList.remove('hidden');
            outputContainer.classList.add('hidden');
        }

        // --- Data Processing ---
        function getGrade(score) {
            if (score >= 90) return 'A';
            if (score >= 80) return 'B';
            if (score >= 70) return 'C';
            if (score >= 60) return 'D';
            return 'F';
        }

        function parseAndProcessCSV(text) {
            const lines = text.split('\n').filter(line => line.trim() !== '');
            if (lines.length === 0) throw new Error("CSV file is empty.");

            studentData = lines.map((line, index) => {
                const values = line.split(',');
                if (values.length !== 4) {
                    console.warn(`Skipping malformed line ${index + 1}: "${line}"`);
                    return null;
                }
                const [sex, name, surname, scoreStr] = values;
                const score = parseFloat(scoreStr);
                if (isNaN(score)) {
                    console.warn(`Skipping line with invalid score ${index + 1}: "${line}"`);
                    return null;
                }
                return { sex, name, surname, score, grade: getGrade(score) };
            }).filter(Boolean); // Filter out null entries

            if (studentData.length === 0) {
                throw new Error("No valid student data found in the CSV. Ensure format is: sex,name,surname,score");
            }

            // Sort data by score descending
            studentData.sort((a, b) => b.score - a.score);
        }

        // --- Display Functions ---
        function displayAllData() {
            displayTable();
            displayStatistics();
            drawHistogram();
        }

        function displayTable() {
            let tableHTML = '<table class="w-full text-sm text-left text-gray-500">';
            tableHTML += `<thead class="text-xs text-gray-700 uppercase bg-sky-100 sticky top-0"><tr>
                        <th scope="col" class="px-6 py-3">Sex</th>
                        <th scope="col" class="px-6 py-3">Name</th>
                        <th scope="col" class="px-6 py-3">Surname</th>
                        <th scope="col" class="px-6 py-3">Score</th>
                        <th scope="col" class="px-6 py-3">Grade</th>
                    </tr></thead><tbody>`;

            studentData.forEach(student => {
                tableHTML += `<tr class="bg-white border-b hover:bg-gray-50">
                        <td class="px-6 py-4">${student.sex}</td>
                        <td class="px-6 py-4">${student.name}</td>
                        <td class="px-6 py-4">${student.surname}</td>
                        <td class="px-6 py-4">${student.score}</td>
                        <td class="px-6 py-4 font-bold">${student.grade}</td>
                    </tr>`;
            });
            tableHTML += '</tbody></table>';
            tableContainer.innerHTML = tableHTML;
        }
        
        // --- Stat Helper Functions ---
        function calculateMedian(scores) {
            const sortedScores = [...scores].sort((a, b) => a - b);
            const mid = Math.floor(sortedScores.length / 2);
            return sortedScores.length % 2 !== 0 ? sortedScores[mid] : (sortedScores[mid - 1] + sortedScores[mid]) / 2;
        }

        function calculateStdDev(scores) {
            const n = scores.length;
            if (n === 0) return 0;
            const mean = scores.reduce((a, b) => a + b) / n;
            const variance = scores.reduce((a, b) => a + (b - mean) ** 2, 0) / n;
            return Math.sqrt(variance);
        }

        function displayStatistics() {
            const scores = studentData.map(s => s.score);
            const totalStudents = scores.length;
            const average = scores.reduce((a, b) => a + b, 0) / totalStudents;
            const highest = Math.max(...scores);
            const lowest = Math.min(...scores);
            const median = calculateMedian(scores);
            const stdDev = calculateStdDev(scores);
            
            statsContainer.innerHTML = `
                <div class="grid grid-cols-2 sm:grid-cols-3 gap-3">
                    <div class="bg-white p-3 rounded-lg text-center shadow-sm">
                        <div class="text-3xl">👥</div>
                        <div class="font-bold text-sky-800 text-xl">${totalStudents}</div>
                        <div class="text-xs text-gray-500">Total Students</div>
                    </div>
                    <div class="bg-white p-3 rounded-lg text-center shadow-sm">
                        <div class="text-3xl">📊</div>
                        <div class="font-bold text-sky-800 text-xl">${average.toFixed(2)}</div>
                        <div class="text-xs text-gray-500">Average Score</div>
                    </div>
                     <div class="bg-white p-3 rounded-lg text-center shadow-sm">
                        <div class="text-3xl">🥇</div>
                        <div class="font-bold text-sky-800 text-xl">${highest}</div>
                        <div class="text-xs text-gray-500">Highest Score</div>
                    </div>
                     <div class="bg-white p-3 rounded-lg text-center shadow-sm">
                        <div class="text-3xl">📉</div>
                        <div class="font-bold text-sky-800 text-xl">${lowest}</div>
                        <div class="text-xs text-gray-500">Lowest Score</div>
                    </div>
                     <div class="bg-white p-3 rounded-lg text-center shadow-sm">
                        <div class="text-3xl">⚖️</div>
                        <div class="font-bold text-sky-800 text-xl">${median.toFixed(2)}</div>
                        <div class="text-xs text-gray-500">Median Score</div>
                    </div>
                     <div class="bg-white p-3 rounded-lg text-center shadow-sm">
                        <div class="text-3xl">📈</div>
                        <div class="font-bold text-sky-800 text-xl">${stdDev.toFixed(2)}</div>
                        <div class="text-xs text-gray-500">Std. Deviation</div>
                    </div>
                </div>
            `;
        }

        function drawHistogram() {
            const gradeColors = {
                'A': 'rgba(217, 119, 6, 0.9)',   // Gold
                'B': 'rgba(59, 130, 246, 0.9)',   // Blue-500
                'C': 'rgba(59, 130, 246, 0.9)',   // Blue-500
                'D': 'rgba(59, 130, 246, 0.9)',   // Blue-500
                'F': 'rgba(239, 68, 68, 0.9)'     // Red-500
            };
            
            const gradeCounts = studentData.reduce((acc, student) => {
                acc[student.grade] = (acc[student.grade] || 0) + 1;
                return acc;
            }, { 'A': 0, 'B': 0, 'C': 0, 'D': 0, 'F': 0 });

            const grades = ['A', 'B', 'C', 'D', 'F'];
            const counts = grades.map(g => gradeCounts[g]);
            const maxCount = Math.max(...counts, 1);

            const canvasWidth = histogramCanvas.width;
            const canvasHeight = histogramCanvas.height;
            const padding = 30;
            const barWidth = (canvasWidth - 2 * padding) / grades.length * 0.7;
            const barSpacing = (canvasWidth - 2 * padding) / grades.length * 0.3;

            ctx.clearRect(0, 0, canvasWidth, canvasHeight);
            ctx.font = '12px "Comic Neue", cursive';

            grades.forEach((grade, i) => {
                const barHeight = (counts[i] / maxCount) * (canvasHeight - 2 * padding);
                const x = padding + i * (barWidth + barSpacing);
                const y = canvasHeight - padding - barHeight;

                // Draw Bar with specific color
                ctx.fillStyle = gradeColors[grade];
                ctx.fillRect(x, y, barWidth, barHeight);
                
                // Draw Grade Label (X-axis)
                ctx.fillStyle = '#333';
                ctx.textAlign = 'center';
                ctx.fillText(grade, x + barWidth / 2, canvasHeight - padding + 15);
                
                // Draw Count Label (on top of bar)
                ctx.fillText(counts[i], x + barWidth / 2, y - 5);
            });
            
            // Draw Y-axis line
            ctx.beginPath();
            ctx.moveTo(padding, padding);
            ctx.lineTo(padding, canvasHeight - padding);
            ctx.stroke();

            // Draw X-axis line
            ctx.beginPath();
            ctx.moveTo(padding, canvasHeight - padding);
            ctx.lineTo(canvasWidth - padding, canvasHeight - padding);
            ctx.stroke();
        }

        // --- Download Function ---
        function downloadSortedCSV() {
            const headers = "sex,name,surname,score,grade";
            const csvContent = studentData.map(s => 
                `${s.sex},${s.name},${s.surname},${s.score},${s.grade}`
            ).join('\n');
            
            const fullCSV = `${headers}\n${csvContent}`;
            const blob = new Blob([fullCSV], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement("a");
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", "sorted_grades.csv");
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    </script>
</body>
</html>

