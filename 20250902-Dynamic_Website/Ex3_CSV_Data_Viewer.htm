<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cute CSV Data Viewer</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts for a friendly look -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Nunito', sans-serif;
        }
        /* Custom styles for the file input button */
        .custom-file-button input[type="file"] {
            display: none;
        }
        /* Style for sortable headers */
        .sort-button {
            background: none;
            border: none;
            cursor: pointer;
            font-weight: inherit;
            color: inherit;
            display: flex;
            align-items: center;
            padding: 0;
            margin: 0;
            width: 100%;
            text-align: left;
        }
        .sort-indicator {
            margin-left: 8px;
            font-size: 0.9em;
            color: #9ca3af; /* gray-400 */
        }
        .sort-button.active .sort-indicator {
            color: #0891b2; /* cyan-600 */
        }
    </style>
</head>
<body class="bg-gradient-to-br from-cyan-50 to-blue-100 text-gray-800 min-h-screen flex items-center justify-center p-4">

    <div class="container mx-auto max-w-5xl w-full bg-white rounded-2xl shadow-xl p-6 md:p-8 transform transition-all duration-500">
        
        <!-- Header Section -->
        <div class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-cyan-600">CSV Data Viewer</h1>
            <p class="text-gray-500 mt-2">Select a CSV file to view its contents in a pretty table!</p>
        </div>

        <!-- File Input Section - Now a single button -->
        <div class="flex justify-center items-center mb-6">
            <label for="csvFileInput" class="custom-file-button cursor-pointer bg-cyan-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-cyan-600 hover:scale-105 transform transition-all duration-300 flex items-center gap-3">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
                <span id="fileLabelText">Choose a CSV File</span>
            </label>
            <input type="file" id="csvFileInput" accept=".csv">
        </div>
        
        <!-- Placeholder for a message or error -->
        <div id="message" class="text-center text-red-500 font-medium my-4"></div>

        <!-- Table Display Area -->
        <div id="table-container" class="overflow-x-auto rounded-lg border border-gray-200">
            <!-- The table will be generated by JavaScript and inserted here -->
        </div>

    </div>

    <script>
        const fileInput = document.getElementById('csvFileInput');
        const fileLabelText = document.getElementById('fileLabelText');
        const tableContainer = document.getElementById('table-container');
        const messageDiv = document.getElementById('message');

        // State variables to hold data and sort status
        let tableData = [];
        let originalTableData = []; // To store original order for reset
        let sortState = {
            columnIndex: -1,
            direction: 'none' // 'asc', 'desc', or 'none'
        };

        // Listen for changes on the file input element
        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            tableContainer.innerHTML = '';
            messageDiv.textContent = '';
            
            if (!file) {
                fileLabelText.textContent = 'Choose a CSV File';
                return;
            }
            if (!file.name.endsWith('.csv')) {
                fileLabelText.textContent = file.name;
                messageDiv.textContent = 'Error: Please select a valid .csv file.';
                return;
            }
            
            fileLabelText.textContent = file.name;
            const reader = new FileReader();
            reader.onload = function(e) {
                parseAndDisplayCSV(e.target.result);
            };
            reader.onerror = function() {
                messageDiv.textContent = 'Error reading the file.';
            };
            reader.readAsText(file);
        });

        /**
         * Parses CSV text and stores it. Then calls render function.
         * Assumes every row in the file is a data row.
         * @param {string} csvContent The string content of the CSV file.
         */
        function parseAndDisplayCSV(csvContent) {
            const rows = csvContent.trim().split('\n').filter(row => row.trim() !== '');
            if (rows.length === 0) {
                messageDiv.textContent = 'The CSV file is empty.';
                return;
            }
            // Reset state
            tableData = rows.map(row => row.split(',').map(cell => cell.trim()));
            originalTableData = [...tableData]; // Store a copy for resetting sort
            sortState = { columnIndex: -1, direction: 'none' };
            renderTable();
        }

        /**
         * Sorts the tableData based on the clicked column.
         * @param {number} columnIndex The index of the column to sort by.
         */
        function handleSort(columnIndex) {
            if (sortState.columnIndex === columnIndex) {
                // Cycle through directions: asc -> desc -> none
                if (sortState.direction === 'asc') sortState.direction = 'desc';
                else if (sortState.direction === 'desc') sortState.direction = 'none';
                else sortState.direction = 'asc';
            } else {
                sortState.columnIndex = columnIndex;
                sortState.direction = 'asc';
            }

            // Perform the sort if a direction is set
            if (sortState.direction !== 'none') {
                const isNumeric = columnIndex === 2 || columnIndex === 3; // Age and Height are numeric
                
                tableData.sort((a, b) => {
                    // handle potential empty cells during sort
                    const valA = a[columnIndex] || '';
                    const valB = b[columnIndex] || '';

                    const numA = isNumeric ? parseFloat(valA) : valA.toLowerCase();
                    const numB = isNumeric ? parseFloat(valB) : valB.toLowerCase();

                    if (numA < numB) return sortState.direction === 'asc' ? -1 : 1;
                    if (numA > numB) return sortState.direction === 'asc' ? 1 : -1;
                    return 0;
                });
            } else {
                // If sort direction is 'none', revert to original order.
                tableData = [...originalTableData];
            }
            
            renderTable();
        }
        
        /**
         * Renders the entire table (headers and body) based on the current state.
         */
        function renderTable() {
            tableContainer.innerHTML = ''; // Clear previous table
            const headers = ['Name', 'Surname', 'Age', 'Height'];

            const table = document.createElement('table');
            table.className = 'min-w-full divide-y divide-gray-200';

            const thead = document.createElement('thead');
            thead.className = 'bg-cyan-100/70';
            const headerRow = document.createElement('tr');
            
            headers.forEach((headerText, index) => {
                const th = document.createElement('th');
                th.className = 'px-6 py-3 text-left text-xs font-bold text-cyan-700 uppercase tracking-wider';
                
                const button = document.createElement('button');
                button.className = 'sort-button';
                button.textContent = headerText;
                button.onclick = () => handleSort(index);

                const indicator = document.createElement('span');
                indicator.className = 'sort-indicator';

                if (sortState.columnIndex === index && sortState.direction !== 'none') {
                    button.classList.add('active');
                    indicator.textContent = sortState.direction === 'asc' ? '▲' : '▼';
                }

                button.appendChild(indicator);
                th.appendChild(button);
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);

            const tbody = document.createElement('tbody');
            tbody.className = 'bg-white divide-y divide-gray-200';

            tableData.forEach(rowData => {
                 if (rowData.length > 0 && rowData.some(cell => cell)) { // Check if row is not empty
                    const tr = document.createElement('tr');
                    tr.className = 'hover:bg-cyan-50/50 transition-colors even:bg-gray-50/50';
                    // We need to render a cell for each header, even if data is missing
                    for(let i=0; i < headers.length; i++) {
                        const cellData = rowData[i] || ''; // Use empty string if cell is missing
                        const td = document.createElement('td');
                        td.textContent = cellData;
                        td.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-700';
                        tr.appendChild(td);
                    }
                    tbody.appendChild(tr);
                 }
            });

            table.appendChild(thead);
            table.appendChild(tbody);
            tableContainer.appendChild(table);
        }
    </script>

</body>
</html>

